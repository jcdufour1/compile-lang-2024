type io import = std.io
type util import = std.util

type Bool enum {
    true
    false
}

fn is_true() Bool {
    return .true
}

fn fun1() i32 {
    defer io.printf("thing 1.4\n")
    io.printf("thing 1.1\n")
    defer io.printf("thing 1.3\n")
    io.printf("thing 1.2\n")
    return 1
}

fn fun2() i32 {
    defer io.printf("thing 2.3\n")
    return 2
    defer io.printf("thing 2.2\n")
    io.printf("thing 2.1\n")
    return 1000
}

fn fun3() i32 {
    //for idx i32 in 0..3 {
    //}
    let num i32 = 0
    if 1 {
        defer num = 3
        num = 2
        yield
        defer num = 4
    } else {
        num = 1000
    }
    return num
}

fn fun4() i32 {
    defer io.printf("at very end yes 4.2\n")
    if 1 {
        defer io.printf("yes 4.1\n")
        return 4
        defer io.printf("no 4.1\n")
    }
    defer io.printf("at very end no 4.2\n")
    return 1010
}

fn fun5() i32 {
    defer io.printf("at very end yes 5.1\n")
    let num i32 = 0
    for 1 {
        defer num = 5
        num = 2
        break
        defer io.printf("no 5.4\n")
        defer num = 4
    }
    defer io.printf("at very end yes 5.2\n")
    return num
    defer io.printf("at very end no 5.1\n")
    return num
}

fn fun6() i32 {
    defer io.printf("at very end yes 6.1\n")
    let num i32 = 0
    for 1 {
        if 0 {
            defer io.printf("no 6.8")
            io.printf("no 6.7")
        } else {
            defer num = 6
            num = 2
            break
            defer io.printf("no 6.4")
            defer num = 4
        }
        defer io.printf("at very end no 6.9\n")
        io.printf("at very end no 6.10\n")
    }
    defer io.printf("at very end yes 6.2\n")
    io.printf("at very end yes 6.8\n")
    return num
    defer io.printf("at very end no 6.1\n")
    io.printf("at very end no 6.11\n")
    return num
}

fn fun7() i32 {
    defer io.printf("at very end yes 7.1\n")
    io.printf("yes 7.2\n")
    let num i32 = 0
    for 1 {
        if num == 2 {
            break
        }

        if 0 {
            defer io.printf("no 7.8\n")
            io.printf("no 7.7\n")
        } else {
            defer num += 1
            num += 1
            defer io.printf("yes 7.100\n")
            io.printf("yes 7.101\n")
            continue
            defer io.printf("no 7.4\n")
            io.printf("no 7.5\n")
        }
        defer io.printf("at very end no 7.9\n")
        io.printf("at very end no 7.10\n")
    }
    defer io.printf("at very end yes 7.2\n")
    io.printf("at very end yes 7.8\n")
    return num + 5
    defer io.printf("at very end no 7.1\n")
    io.printf("at very end no 7.11\n")
    return 79
}

fn fun8() i32 {
    defer io.printf("at very end yes 8.1\n")
    let num i32 = 0
    for idx i32 in 0..2 {
        for idx_2 i32 in 0..2 {
            if 0 {
                defer io.printf("no 8.8\n")
                io.printf("no 8.1\n")
            } else {
                defer io.printf("yes 8.3\n")
                io.printf("yes 8.2\n")
                continue
                defer io.printf("no 8.2\n")
                io.printf("no 8.3\n")
            }
            defer io.printf("at very end no 8.9\n")
            io.printf("at very end no 8.10\n")
        }
    }
    defer io.printf("at very end yes 8.2\n")
    io.printf("at very end yes 8.8\n")
    return 8
    defer io.printf("at very end no 8.1\n")
    io.printf("at very end no 8.11\n")
    return 8
}


fn main() i32 {
    util.assert(fun1() == 1)
    util.assert(fun2() == 2)
    util.assert(fun3() == 3)
    util.assert(fun4() == 4)
    util.assert(fun5() == 5)
    util.assert(fun6() == 6)
    util.assert(fun7() == 7)
    util.assert(fun8() == 8)

    //io.printf("thing thing\n");
    //defer io.printf("thing thing 8\n");
    //if 1 {
    //    io.printf("thing thing 3\n");
    //    defer io.printf("thing thing 4\n");
    //    return 5
    //    io.printf("never 2\n");
    //} else {
    //    io.printf("never\n");
    //}
    return 1011
}
