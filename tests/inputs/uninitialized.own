
type Way enum {
    way1
    way2
}

type Token struct {
    num i32
    character u8
}

fn aux_1arg(arg i32) i32 {
    let num i32 = arg
    return arg
}

fn wrong1() i32 {
    let status i32
    return status
}

fn wrong2() i32 {
    let status i32
    aux_1arg(status)
    status = 8
    return status
}

fn right1() i32 {
    let status i32
    if 1 {
        status = 1
    } else {
        status = 4
    }
    return status
}

fn wrong3() i32 {
    let status i32
    if 1 {
    } else {
        status = 4
    }
    return status
}

fn wrong4() i32 {
    let way Way = .way1
    let status i32
    switch way {
        case .way1: break
        case .way2: status = 4
    }
    return status
}

fn wrong5() i32 {
    let token Token
    return token.num
}

fn wrong6() i32 {
    {
        let num i32 = 0
    }

    {
        let num i32
        let num2 i32 = num
    }

    return 0
}

fn main() i32 {
    wrong1()
    wrong2()
    wrong3()
    wrong4()
    wrong5()
    wrong6()
    right1()
    let status i32
    return status
}
