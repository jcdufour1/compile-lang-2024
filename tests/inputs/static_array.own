type io import = std.io
type rt import = std.runtime
type coll import = std.collections


fn main() i32 {
    let nums i32[3] = [8, 76, 77]

    for idx u64 in 0..nums.count {
        io.printf("before 1: %d\n", *rt.static_array_access(nums, idx), "\n")
        *rt.static_array_access(nums, idx) = unsafe_cast<i32>idx
    }
    for idx u64 in 0..nums.count {
        io.printf("after  1: %d\n", *rt.static_array_access(nums, idx), "\n")
    }

    for idx u64 in 0..nums.count {
        io.printf("before 2: %d\n", *coll.slice_at_ref(rt.static_array_slice(nums), idx), "\n")
        *coll.slice_at_ref(rt.static_array_slice(nums), idx) = 4*unsafe_cast<i32>idx
    }
    for idx u64 in 0..nums.count {
        io.printf("after  2: %d\n", *coll.slice_at_ref(rt.static_array_slice(nums), idx), "\n")
    }

    for idx u64 in 0..nums.count {
        io.printf("before 3: %d\n", nums[idx])
        nums[idx] = 43*unsafe_cast<i32>idx
    }
    for idx u64 in 0..nums.count {
        io.printf("after 3: %d\n", nums[idx])
    }

    for idx u64 in 0..nums.count {
        let ptr i32* = &nums[idx]
        io.printf("thing 4: %d\n", *ptr)
    }

    return 0
}
