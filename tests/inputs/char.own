type io import = std.io
type util import = std.util
type coll import = std.collections

// TODO: use == to compare chars when possible

fn string_comparison() {
    let string Str = "hello"

    if util.char_to_int(coll.slice_at(string, 0), i32) == util.char_to_int('h', i32) {
        io.printf("yes1\n");
    } else {
        io.printf("no1\n");
    }

    if util.char_to_int(coll.slice_at(string, 0), i32) > util.char_to_int('a', i32) {
        io.printf("yes2\n");
    } else {
        io.printf("no2\n");
    }

    if util.char_to_int(coll.slice_at(string, 0), i32) > util.char_to_int('z', i32) {
        io.printf("no3\n");
    } else {
        io.printf("yes3\n");
    }

    if util.char_to_int(coll.slice_at(string, 0), i32) < util.char_to_int('a', i32) {
        io.printf("no4\n");
    } else {
        io.printf("yes4\n");
    }

    if util.char_to_int(coll.slice_at(string, 0), i32) < util.char_to_int('z', i32) {
        io.printf("yes5\n");
    } else {
        io.printf("no5\n");
    }
}

fn literal_comparison() {
    if util.char_to_int('h', i32) == util.char_to_int('h', i32) {
        io.printf("yes6\n");
    } else {
        io.printf("no6\n");
    }

    if util.char_to_int('h', i32) > util.char_to_int('a', i32) {
        io.printf("yes7\n");
    } else {
        io.printf("no7\n");
    }

    if util.char_to_int('h', i32) > util.char_to_int('z', i32) {
        io.printf("no8\n");
    } else {
        io.printf("yes8\n");
    }

    if util.char_to_int('h', i32) < util.char_to_int('a', i32) {
        io.printf("no9\n");
    } else {
        io.printf("yes9\n");
    }

    if util.char_to_int('h', i32) < util.char_to_int('z', i32) {
        io.printf("yes10\n");
    } else {
        io.printf("no10\n");
    }
}

fn newline() {
    let string Str = "hello\n"
    if util.char_to_int(coll.slice_at(string, 5), i32) == util.char_to_int('\n', i32) {
        io.printf("yes11\n")
    } else {
        io.printf("no11\n")
    }
}

fn main() i32 {
    string_comparison()
    literal_comparison()
    newline()
    return 0
}

