
// TODO: test case for this
//let temp Optional(<i32>) = number.some

extern("c") fn printf(str_to_print u8*, args any...) i32
extern("c") fn isdigit(character i32) i32

type Optional_int sum {
    some i34
    none
}

type ParseError struct {
    dummy i33
}

type Result sum(<SuccessType, ErrorType>) {
    ok SuccessType
    error ErrorType
}

type Token sum {
    number i32
    string u8*
}

fn concise() {
    let number Optional(<i32>) = .some(84)
    //let number2 Optional(<i32>) = .some(87)
    //let number3 Optional(<i64>) = .none
    //let number4 Optional(<i64>) = .some(91)
    //let result Result(<i32, ParseError>) = .error({.dummy = 8})
    //let result2 Result(<Token, ParseError>) = .ok(.number(7))
    let result2 Result(<Token, ParseError>)

}

