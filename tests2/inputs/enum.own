type io import = std.io


type TokenType enum {
    number
    string
}

type TokenType2 enum {
    number, string
}

type Token struct {
    kind TokenType
    number_data i32
    string_data u8*
}

fn print_token_if(token Token) {
    if token.kind == TokenType.number {
        io.printf("%d\n", token.number_data)
    } else if token.kind == TokenType.string {
        io.printf("%s\n", token.string_data)
    } else {
        io.printf("invalid token type\n")
    }
}

fn print_token_switch(token Token) {
    switch token.kind {
    case TokenType.number: io.printf("%d\n", token.number_data)
    case TokenType.string: io.printf("%s\n", token.string_data)
    default: io.printf("invalid token type\n")
    }
}

fn print_token_switch_non_exhaustive(token Token) {
    switch token.kind {
    case TokenType.number: io.printf("%d\n", token.number_data)
    default: io.printf("invalid token type\n")
    }
}

// check that scope rules are followed for type subtypes enum
type NodeType enum {
    NONE
}

type LlvmType enum {
    NONE
}

fn main() i32 {
    let token_type TokenType = TokenType.number
    io.printf("%d\n", token_type);

    token_type = TokenType.string
    io.printf("%d\n", token_type);

    {
        let token Token
        token.kind = TokenType.number
        token.number_data = 87
        token.string_data = "hello"
        print_token_if(token)
        print_token_switch(token)
    }

    {
        let token Token
        token.kind = TokenType.string
        token.number_data = 87
        token.string_data = "hello"
        print_token_if(token)
        print_token_switch(token)
    }

    {
        let token Token
        token.kind = TokenType.string
        token.number_data = 87
        token.string_data = "hello"
        print_token_switch_non_exhaustive(token)
    }
    return 0
}

