type io import = std.io

type Bool enum {
    true
    false
}

fn is_true() Bool {
    return .true
}

fn fun1() i32 {
    defer io.printf("thing 1.4\n")
    io.printf("thing 1.1\n")
    defer io.printf("thing 1.3\n")
    io.printf("thing 1.2\n")
    return 1
}

fn fun2() i32 {
    defer io.printf("thing 2.3\n")
    return 2
    defer io.printf("thing 2.2\n")
    io.printf("thing 2.1\n")
    return 1000
}

fn fun3() i32 {
    //for idx i32 in 0..3 {
    //}
    let num i32 = 0
    if 1 {
        defer num = 3
        num = 2
        break
        defer num = 4
    } else {
        num = 1000
    }
    return num
}

//fn fun4() i32 {
//    //for idx i32 in 0..3 {
//    //}
//    let num i32 = 0
//    if 1 {
//        defer io.printf("in fun4: num = %d\n", num)
//        defer num = 3
//        num = 2
//        return 4
//        defer num = 4
//    } else {
//        num = 1000
//    }
//    return num
//}

fn fun4() i32 {
    //for idx i32 in 0..3 {
    //}
    defer io.printf("at very end yes\n")
    if 1 {
        return 4
        defer io.printf("thing")
    }
    defer io.printf("at very end no\n")
    return 1010
}

fn fun7() i32 {
    let num i32 = switch is_true() {
        case .true: break 4
        case .false: break 1000
    }
    return num
}

fn fun8() {
    defer io.printf("thing 4.4\n")
    io.printf("thing 4.1\n")
    defer io.printf("thing 4.3\n")
    io.printf("thing 4.2\n")
    return
}

fn main() i32 {
    if 1 {
        return 5
    } else {
        io.printf("never\n");
    }
    return 1011
}
