
type util import = std.util
type io import = std.io

// TODO: consider making Slice.count type generic (probably implement default arguments for generics first)
// TODO: count should be usize by default when usize is implemented
type Slice struct(<ItemT>) {
    buf ItemT*
    count u64
}

fn slice_at(slice Slice(<ItemT>), index u64, ItemT Type) ItemT {
    if (index >= slice.count) {
        util.abort()
    }
    return slice.buf[index]
}

// TODO: count and max should be usize by default when usize is implemented
type Arr struct(<ItemT>) {
    buf ItemT*
    count u64
    max u64
}

fn arr_new(max_capacity u64, ItemT Type, file u8* = #file, line i32 = #line, column i32 = #column) Arr(<ItemT>) {
    let buf ItemT* = unsafe_cast<ItemT*>util.malloc(sizeof(ItemT)*max_capacity)
    util.assert(buf != unsafe_cast<Token*>0, "out of memory", .file = file, .line = line, .column = column)
    return {buf, 0, max_capacity}
}

fn arr_free(arr Arr(<ItemT>)*, ItemT Type) {
    util.free(unsafe_cast<opaque*>arr.buf);
    arr.buf = unsafe_cast<ItemT*>0
    arr.max = 0
    arr.count = 0
}

fn arr_insert(arr Arr(<ItemT>)*, item ItemT, index u64, ItemT Type, file u8* = #file, line i32 = #line, column i32 = #column) {
    util.assert(arr.count < arr.max, "Arr overflow", .file = file, .line = line, .column = column);
    util.assert(index <= arr.count, "out of bounds", .file = file, .line = line, .column = column);
    if (arr.count - index > 0) {
        // TODO: fix type inference bug, then remove explicit ItemT arguent here
        util.move_items(&arr.buf[index + 1], &arr.buf[index], arr.count - index, ItemT);
    }
    arr.buf[index] = item
    arr.count += 1
}

fn arr_append(arr Arr(<ItemT>)*, item ItemT, ItemT Type, file u8* = #file, line i32 = #line, column i32 = #column) {
    util.assert(arr.count < arr.max, "Arr overflow", .file = file, .line = line, .column = column);
    arr.buf[arr.count] = item
    arr.count += 1
}

fn arr_at(arr Arr(<ItemT>), index u64, ItemT Type, file u8* = #file, line i32 = #line, column i32 = #column) ItemT {
    util.assert(index < arr.count, "out of bounds", .file = file, .line = line, .column = column);
    return arr.buf[index]
}

fn arr_first(arr Arr(<ItemT>), ItemT Type, file u8* = #file, line i32 = #line, column i32 = #column) ItemT {
    return arr_at(arr, 0, .file = file, .line = line, .column = column)
}

fn arr_last(arr Arr(<ItemT>), ItemT Type, file u8* = #file, line i32 = #line, column i32 = #column) ItemT {
    util.assert(index < arr.count, "out of bounds", .file = file, .line = line, .column = column);
    return arr.buf[arr.count - 1]
}

