
extern("c") fn printf(format_string u8*, args any...) i32

type Token struct {
    num i32
    string_data u8*
    div5 Div
}

type Div struct {
    numerator i32
    denominator i32
}

fn get_numerator(div Div) i32 {
    div.numerator = 8
    div.denominator = 7
    printf("%d/%d\n", div.numerator, div.denominator)
    return div.numerator
}

fn get_div(div Div) Div {
    div.numerator = 14
    div.denominator = 34
    printf("%d/%d\n", div.numerator, div.denominator)
    return div
}

fn main() i32 {
    let div Div
    div = {.numerator = 9, .denominator = 2}
    printf("%d/%d\n", div.numerator, div.denominator)
    div.numerator = 11
    div.denominator = 10
    let result i32 = get_numerator(div)
    printf("%d/%d\n", div.numerator, div.denominator)
    printf("%d/%d\n", result, div.denominator)
    let new_div3 Div = get_div(div)
    printf("%d/%d\n", new_div3.numerator, new_div3.denominator)
    // confirm that div is not modified by get_div
    printf("%d/%d\n", div.numerator, div.denominator)
    printf("%d/%d\n", result, div.denominator)

    let token Token
    token.num = 923;
    token.string_data = "hello";
    token.div5 = new_div3;
    printf("token: %d %s\n", token.num, token.string_data);
    printf("%d/%d\n", token.div5.numerator, token.div5.denominator)
    token.div5.numerator = 831;
    token.div5.denominator = 700;
    printf("%d/%d\n", token.div5.numerator, token.div5.denominator)
    token.div5 = div;
    printf("%d/%d\n", token.div5.numerator, token.div5.denominator)

    let token2 Token
    token2.num = 82
    token2.string_data = "bye"
    let div19 Div = {.numerator = 56, .denominator = 84}
    token2.div5 = div19

    token = token2
    printf("%d %s %d/%d\n", token.num, token.string_data, token.div5.numerator, token.div5.denominator)
    token2.num = 71
    printf("%d %s %d/%d\n", token2.num, token2.string_data, token2.div5.numerator, token2.div5.denominator)
    // confirm that token2 is actually a copy of token
    printf("%d %s %d/%d\n", token.num, token.string_data, token.div5.numerator, token.div5.denominator)
    return 0
}
