
// TODO: check == edge cases to distinguish between greater_than and greater
// TODO: check == edge cases to distinguish between less_than and less

extern("c") fn printf(str_to_print u8*, args any...) i32

fn get_unsigned() u32 {
    return 76;
}

fn get_signed() i32 {
    return -3
}

// TODO: expected failure case for:
// - -76 assigned to unsinged thing

fn unsafe_cast_and_modulo() {
    let num7 i8 = -256/2 + 1;
    printf("num7: %d\n", unsafe_cast<i32>num7)
    num7 = num7%4
    // expect -3
    printf("num7: %d\n", unsafe_cast<i32>num7)

    let num8 u8 = 255;
    printf("num8: %d\n", unsafe_cast<u32>num8)
    num8 = num8%4
    // expect 3
    printf("num8: %d\n", unsafe_cast<i32>num8)

}

fn division() {
    let num10 u8 = 255
    printf("num10: %d\n", unsafe_cast<u32>num10)
    num10 = num10/4
    printf("num10: %i\n", unsafe_cast<u32>num10)

    let num11 i8 = -256/2 + 1;
    printf("num11: %d\n", unsafe_cast<i32>num11)
    num11 = num11/4
    printf("num11: %i\n", unsafe_cast<i32>num11)

}

// the idea with these 4 functions is that 255 and -127 are effectively the same number (because two's complement)
// we want to make sure that greater_than, etc. are distinguishing between signed and unsigned
fn greater_than() {
    let num12 u8 = 1
    if num12>255 {
        printf("yes num12\n")
    } else {
        printf("no num12\n")
    }

    let num13 i8 = 1
    if num13>(-127) {
        printf("yes num13\n")
    } else {
        printf("no num13\n")
    }
}

fn greater_than_or_equal() {
    let num14 u8 = 1
    if num14>=255 {
        printf("yes num14\n")
    } else {
        printf("no num14\n")
    }

    let num15 i8 = 1
    if num15>=(-127) {
        printf("yes num15\n")
    } else {
        printf("no num15\n")
    }
}

fn less_than() {
    let num16 u8 = 1
    if num16<255 {
        printf("yes num16\n")
    } else {
        printf("no num16\n")
    }

    let num17 i8 = 1
    if num17<(-127) {
        printf("yes num17\n")
    } else {
        printf("no num17\n")
    }
}

fn less_than_or_equal() {
    let num18 u8 = 1
    if num18<=255 {
        printf("yes num18\n")
    } else {
        printf("no num18\n")
    }

    let num19 i8 = 1
    if num19<=(-127) {
        printf("yes num19\n")
    } else {
        printf("no num19\n")
    }
}

fn main() i32 {
    let num1 u32 = 8 
    let num2 u32 = 3 
    printf("%d\n", num1 + num2)

    let num3 u32 = 3*4 
    printf("%d\n", num3)

    let num4 u32 = 3*get_unsigned() 
    printf("%d\n", num4)

    let num6 i8 = -1
    let num6_i32 i32 = unsafe_cast<i32>num6
    printf("num6_i32: %d\n", num6_i32)
    let num6_u32 u32 = unsafe_cast<u32>num6
    printf("num6_u32: %d\n", num6_u32)

    unsafe_cast_and_modulo()
    division()
    greater_than()
    greater_than_or_equal()
    less_than()
    less_than_or_equal()

    //let num7 u8 = 255;
    //printf("num7: %d\n", num7)
    //num7 = num7%4
    //printf("num7: %d\n", num7)
    return 0
}

