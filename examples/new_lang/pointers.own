extern("c") fn printf(format_string u8*, args any...) i32

fn add_one(num i32*) {
    deref(num) = num + 1
}

fn sub_one_explicit(num i32*) {
    deref(num) = deref(num) - 1
}

fn add_one_explicit(num i32*) {
    deref(num) = deref(num) + 1
}

fn operation_2(num i32*) {
    deref(num) = 2*num + 1
}

fn operation_2_explicit(num i32*) {
    deref(num) = 2*num + 1
}

type Div struct {
    numerator i32
    denominator i32
}

fn set_div(div Div*) {
    let new_div Div = {.numerator = 134, .denominator = 45};
    deref(div) = new_div;
}

fn set_div_denominator(div Div*) {
    div.denominator = 1298;
}

fn set_div_denominator_explicit_deref(div Div*) {
    deref(div).denominator = 1234;
}

fn print_div(div Div*) {
    printf("%d/%d\n", div.numerator, div.denominator)
}

fn set_div_from_another(dest Div*, src Div*) {
    dest.denominator = src.denominator;
}

fn set_string(string u8**) {
    deref(string) = "bye"
}

fn cast_to_pointer() {
    let pointer u8* = unsafe_cast<u8*>0

    if pointer == unsafe_cast<u8*>0 {
        printf("yes\n");
    }

    if pointer == unsafe_cast<u8*>1 {
        printf("no\n");
    }

    let zero i64 = unsafe_cast<i64>pointer
    printf("pointer back to int: %d\n", zero);
}

fn cast_pointer_to_pointer() {
    let ptr_u8 u8* = unsafe_cast<u8*>1

    let ptr_i32 i32* = unsafe_cast<i32*>ptr_u8

    if ptr_u8 == unsafe_cast<u8*>ptr_i32 {
        printf("pointer_to_pointer: yes\n");
    } else {
        printf("pointer_to_pointer: no\n");
    }
}

fn main() i32 {
    let num i32 = 8
    printf("%d\n", num)
    add_one(refer(num))
    printf("%d\n", num)
    add_one_explicit(refer(num))
    printf("%d\n", num)
    sub_one_explicit(refer(num))
    printf("%d\n", num)
    operation_2(refer(num))
    printf("%d\n", num)
    operation_2_explicit(refer(num))
    printf("%d\n", num)

    let div Div = {.numerator = 87, .denominator = 123};
    printf("part 67: %d/%d\n", div.numerator, div.denominator)
    set_div(refer(div));
    printf("%d/%d\n", div.numerator, div.denominator)
    set_div_denominator_explicit_deref(refer(div));
    printf("part 89: %d/%d\n", div.numerator, div.denominator)
    set_div_denominator(refer(div));
    printf("%d/%d\n", div.numerator, div.denominator)
    print_div(refer(div));
    let div2 Div = {.numerator = 93, .denominator = 71};
    set_div_from_another(refer(div2), refer(div));
    printf("%d/%d\n", div2.numerator, div2.denominator)
    // ensure original div was not modified by `set_div_from_another`
    printf("%d/%d\n", div.numerator, div.denominator)

    let string u8* = "hello"
    printf("%s\n", string)
    set_string(refer(string))
    printf("%s\n", string)

    cast_to_pointer()
    cast_pointer_to_pointer()

    return 0
}
