
extern("c") fn printf(format_string: ptr, args: any...) i32

fn add_one(num: i32*) {
    deref(num) = deref(num) + 1
    return
}

fn operation_2(num: i32*) {
    deref(num) = 2*deref(num) + 1
    return
}

struct Div {
    numerator: i32
    denominator: i32
}

fn set_div(div: Div*) {
    let new_div: Div = {.numerator = 134, .denominator = 45};
    deref(div) = new_div;
    return
}

fn set_div_denominator(div: Div*) {
    div.denominator = 1298;
    return
}

fn print_div(div: Div*) {
    printf("%d/%d\n", div.numerator, div.denominator)
    return
}

fn set_div_from_another(dest: Div*, src: Div*) {
    dest.denominator = src.denominator;
    return
}

fn main() i32 {
    let num: i32 = 8
    printf("%d\n", num)
    add_one(refer(num))
    printf("%d\n", num)
    operation_2(refer(num))
    printf("%d\n", num)

    let div: Div = {.numerator = 87, .denominator = 123};
    printf("%d/%d\n", div.numerator, div.denominator)
    set_div(refer(div));
    printf("%d/%d\n", div.numerator, div.denominator)
    set_div_denominator(refer(div));
    printf("%d/%d\n", div.numerator, div.denominator)
    print_div(refer(div));
    let div2: Div = {.numerator = 93, .denominator = 71};
    set_div_from_another(refer(div2), refer(div));
    printf("%d/%d\n", div2.numerator, div2.denominator)
    // ensure original div was not modified by `set_div_from_another`
    printf("%d/%d\n", div.numerator, div.denominator)

    return 0
}

